{"version":3,"sources":["components/TopBar.js","components/tileData.js","components/PhotoTiles.js","components/PhotoDisplay.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","react_default","a","createElement","id","className","tileData","img","title","author","cols","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","gridList","width","height","PhotoTiles","props","classes","GridList","cellHeight","map","tile","GridListTile","key","src","alt","onClick","PhotoDisplay","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isFullScreen","console","log","setState","prevState","_this2","displayClass","handleClick","photoPath","React","Component","App","selectedPhoto","e","components_TopBar","components_PhotoTiles","src_components_PhotoDisplay","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b2045c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TopBar.css';\r\n\r\nfunction TopBar() {\r\n  return (\r\n    <div id=\"top-bar\">\r\n      <div className=\"top-bar-content\">voohoo</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopBar;\r\n","const tileData = [\r\n  {\r\n    img: 'images/01.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 2,\r\n  },\r\n  {\r\n    img: 'images/02.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/03.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/04.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 2,\r\n  },\r\n  {\r\n    img: 'images/05.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/06.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/07.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/08.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 2,\r\n  },\r\n  {\r\n    img: 'images/09.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/10.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/11.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/12.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/13.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/14.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  },\r\n  {\r\n    img: 'images/15.jpg',\r\n    title: 'Image',\r\n    author: 'author',\r\n    cols: 1,\r\n  }\r\n];\r\n\r\nexport default tileData;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport tileData from './tileData';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n  },\r\n  gridList: {\r\n    width: '100%',\r\n    height: '100%',\r\n  },\r\n}));\r\n\r\nfunction PhotoTiles(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <GridList cellHeight={160} className={classes.gridList} cols={3}>\r\n        {tileData.map(tile => (\r\n          <GridListTile key={tile.img} cols={tile.cols || 1}>\r\n            <img src={tile.img} alt={tile.title} onClick={() => props.onClick(tile.img)} />\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhotoTiles;","import React from 'react';\r\nimport './PhotoDisplay.css';\r\n\r\nclass PhotoDisplay extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isFullScreen: false,\r\n    };\r\n  }\r\n\r\n  handleClick() {\r\n    console.log('CLICK');\r\n    this.setState(prevState => ({\r\n      isFullScreen: !prevState.isFullScreen\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    console.log('RENDER');\r\n    console.log(this.state.isFullScreen);\r\n    const displayClass =\r\n      this.state.isFullScreen ? \"photo-container full-screen\" : \"photo-container\";\r\n\r\n    return (\r\n      <div className={displayClass} onClick={() => this.handleClick()}>\r\n        <img src={this.props.photoPath} className=\"photo-display\" alt=\"Displayed\" />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PhotoDisplay;\r\n","import React from 'react';\nimport './App.css';\nimport Grid from '@material-ui/core/Grid';\nimport TopBar from './components/TopBar';\nimport PhotoTiles from './components/PhotoTiles';\nimport PhotoDisplay from './components/PhotoDisplay';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedPhoto: ''\n    };\n  }\n\n  handleClick(e) {\n    this.setState({\n      selectedPhoto: e\n    });\n  }\n\n  render() {\n\n    return (\n      <div>\n        <TopBar></TopBar>\n        <div className=\"app-container\">\n          <PhotoTiles onClick={(e) => this.handleClick(e)}></PhotoTiles>\n          <PhotoDisplay photoPath={this.state.selectedPhoto}></PhotoDisplay>\n        </div>\n      </div>\n    );\n    /*\n    return (\n      <Grid container spacing={0} style={{height: \"100vh\"}}>\n        <Grid item md={4} className=\"left\">\n          <TopBar></TopBar>\n          <PhotoTiles onClick={(e) => this.handleClick(e)}></PhotoTiles>\n        </Grid>\n        <Grid item md={8} className=\"right\">\n          <PhotoDisplay photoPath={this.state.selectedPhoto}></PhotoDisplay>\n        </Grid>\n      </Grid>\n    );\n    */\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}